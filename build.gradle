description = 'Grpc API'

allprojects {
    group = 'com.grootstock'
    version = '0.1' // CURRENT_GRPC_API_VERSION
}

subprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'java'
    apply plugin: 'signing'
    apply plugin: 'jacoco'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        mavenLocal()
    }

    buildscript {
        repositories.maven {
            url 'https://plugins.gradle.org/m2/'
        }

        dependencies {
            classpath 'net.ltgt.gradle:gradle-apt-plugin:0.6'
        }
    }

    [compileJava, compileTestJava].each() {
        it.options.compilerArgs += ["-Xlint:all", "-Xlint:-options"]
        it.options.encoding = "UTF-8"
    }

    compileTestJava {
        // serialVersionUID is basically guaranteed to be useless in our tests
        options.compilerArgs += ["-Xlint:-serial"]
    }

    jar.manifest {
        attributes('Implementation-Title': name,
                'Implementation-Version': version,
                'Built-By': System.getProperty('user.name'),
                'Built-JDK': System.getProperty('java.version'),
                'Source-Compatibility': sourceCompatibility,
                'Target-Compatibility': targetCompatibility)
    }

    javadoc.options {
        encoding = 'UTF-8'
        links 'https://docs.oracle.com/javase/8/docs/api/'
    }

    ext {
        def grpcVersion = '0.15.0' // '0.15.0'

        libraries = [
                // Annotation processing
                apt_plugin     : 'net.ltgt.gradle:gradle-apt-plugin:0.6',

                // gRPC
                grpc_netty     : "io.grpc:grpc-netty:$grpcVersion",
                grpc_protobuf  : "io.grpc:grpc-protobuf:$grpcVersion",
                grpc_stub      : "io.grpc:grpc-stub:$grpcVersion",

                grpc_protoc_gen: "io.grpc:protoc-gen-grpc-java:$grpcVersion",

                // The version of protoc must match protobuf-java.
                // protobuf-java could be a transitive dependency through grpc.
                protobuf_protoc: "com.google.protobuf:protoc:3.0.0-beta-3",

                // Docker plugin
                gradle_docker  : "com.bmuschko:gradle-docker-plugin:3.+",

                // DI: dagger
                dagger         : 'com.google.dagger:dagger:2.5',
                dagger_compiler: 'com.google.dagger:dagger-compiler:2.5',

                // lombok
                lombok         : 'org.projectlombok:lombok:1.16.+',

                // ORM
                hibernate      : 'org.hibernate:hibernate-core:5.+',
                hibernate_jpa  : 'org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.+',
                mysql          : 'mysql:mysql-connector-java:+',

                // SLF4J logging
                slf4j          : 'org.slf4j:slf4j-api:1.7.+',
                log4j_slf4j    : 'org.apache.logging.log4j:log4j-slf4j-impl:2.+',
                log4j_core     : 'org.apache.logging.log4j:log4j-core:2.+',
                disruptor      : 'com.lmax:disruptor:3.+',

                // Test dependencies.
                junit          : 'junit:junit:4.12',
                mockito        : 'org.mockito:mockito-core:1.10.19',
                truth          : 'com.google.truth:truth:0.28',
        ]
    }

    dependencies {
        // SLF4J logging
        compile libraries.slf4j,
                libraries.log4j_slf4j,
                libraries.log4j_core,
                libraries.disruptor

        testCompile libraries.junit,
                libraries.mockito
    }

    checkstyle {
        configFile = file("$rootDir/checkstyle.xml")
        toolVersion = '6.17'
        ignoreFailures = false
        if (rootProject.hasProperty('checkstyle.ignoreFailures')) {
            ignoreFailures = rootProject.properties['checkstyle.ignoreFailures'].toBoolean()
        }
        configProperties['rootDir'] = rootDir
    }

    checkstyleMain {
        source = fileTree(dir: 'src/main', include: "**/*.java")
    }

    checkstyleTest {
        source = fileTree(dir: 'src/test', include: "**/*.java")
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar, sourcesJar
    }
}
