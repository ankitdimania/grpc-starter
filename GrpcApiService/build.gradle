apply plugin: 'net.ltgt.apt'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'com.bmuschko.docker-remote-api'

buildscript {
    dependencies {
        classpath libraries.gradle_docker
    }
}

description = 'GrpcAPI: Service'

startScripts.enabled = false

//apply from: 'gradle/docker.gradle'

dependencies {
    compile project(':grpcapi-interface')
    compile project(':GrpcApiCommons')
    compile project(':GrpcApiCore')

    // DI
    compile libraries.dagger
    apt libraries.dagger_compiler

    // lombok
    compileOnly libraries.lombok
    apt libraries.lombok

//    compile 'com.google.protobuf:protobuf-java-util:3.0.0-beta-2'
}

task mathServer(type: CreateStartScripts) {
    mainClassName = "com.grootstock.math.MathServer"
    applicationName = "math-server"
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
    defaultJvmOpts = ["-Dlog4j.configurationFile=log4j2-prod.xml"]
}

task helloWorldServer(type: CreateStartScripts) {
    mainClassName = "com.grootstock.helloworld.HelloWorldServer"
    applicationName = "hello-world-server"
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into('bin') {
    from(helloWorldServer)
    from(mathServer)
    fileMode = 0755
}

// Docker
import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

// Mac Users:
// install docker toolbox and run gradle build inside docker session
docker {
    url = System.env.DOCKER_HOST ?
            System.env.DOCKER_HOST.replace("tcp", "https") :
            'unix:///var/run/docker.sock'
    if (System.env.DOCKER_CERT_PATH) {
        certPath = new File(System.env.DOCKER_CERT_PATH)
    }
}

def servicePort = 50051

Tar tarTask = project.tasks.getByName(ApplicationPlugin.TASK_DIST_TAR_NAME)

def determineEntryPoint(Tar tarTask) {
    String installDir = tarTask.archiveName - ".${tarTask.extension}"
    "/$installDir/bin/$mathServer.applicationName".toString()
}

task createDockerfile(type: Dockerfile) {
    destFile = project.file('build/docker/Dockerfile')
    from 'java:8-jre'
    maintainer 'Ankit Dimania "ankitdimania@gmail.com"'
    exposePort servicePort
    addFile tarTask.archivePath.name, '/'
    entryPoint determineEntryPoint(tarTask)

    dependsOn tarTask
}

task createDistCopy(type: Copy) {
//    group = DockerRemoteApiPlugin.DEFAULT_TASK_GROUP
    description = "Copies the distribution resources to a temporary directory for image creation."
    dependsOn tarTask
    from tarTask.archivePath
    into createDockerfile.destFile.parentFile
}

createDockerfile.dependsOn createDistCopy

task buildServiceImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    // TODO: add build number to version tag
    tag = "${project.applicationName.toLowerCase()}:${project.version}"

    dependsOn createDockerfile
}

task pushImage(type: DockerPushImage) {
    description = 'Pushes created Docker image to the repository.'
    dependsOn buildServiceImage
    imageName = buildServiceImage.getTag()
}

// Run tests
task createServiceContainer(type: DockerCreateContainer) {
    dependsOn buildServiceImage
    targetImageId { buildServiceImage.getImageId() }
    portBindings = ["$servicePort:$servicePort"]
}

task startServiceContainer(type: DockerStartContainer) {
    dependsOn createServiceContainer
    targetContainerId { createServiceContainer.getContainerId() }
}

task removeServiceContainer(type: DockerRemoveContainer) {
    targetContainerId { createServiceContainer.getContainerId() }
}

task stopServiceContainer(type: DockerStopContainer) {
    targetContainerId { createServiceContainer.getContainerId() }
    finalizedBy removeServiceContainer
}

task functionalTestService(type: Test) {
    dependsOn startServiceContainer
    finalizedBy stopServiceContainer
}
